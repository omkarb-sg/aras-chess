<AML>
 <Item type="Method" id="8B729033F6934650B097D1AB0C32D458" action="add">
  <comments />
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[var thisItem = this.getInnovator().applyAML("<AML><Item type='chess' action='get' id='" + this.getAttribute("id") + "' select='*' /></AML>");
var white = thisItem.getProperty("owned_by_id");
var black = thisItem.getProperty("managed_by_id");
var lastPlayed = thisItem.getProperty("modified_by_id");

Item alias = null;
string modifiedIdentity;
try {
    alias = this.getInnovator().applyAML(@"
    <AML>
        <Item type=""Alias"" action=""get"" select=""related_id"">
            <source_id>" + this.getInnovator().getUserID() + @"</source_id>
        </Item>
    </AML>
    ");
    modifiedIdentity = this.getInnovator().applyAML(@"
    <AML>
        <Item type=""Alias"" action=""get"" select=""related_id"">
            <source_id>" + lastPlayed + @"</source_id>
        </Item>
    </AML>
    ").getProperty("related_id");
} catch (Exception e) {
    return this.getInnovator().newError("Error in chessPreventLock");
}

// string toPlay = white;
// if (modifiedIdentity == white) toPlay = black;
// if (modifiedIdentity == black) toPlay = white;
// get history count
var relCount = this.getInnovator().applyAML(@"<AML>
    <Item type=""rel_chess_history"" action=""get"" select=""id"">
        <source_id>" + this.getAttribute("id") + @"</source_id>
    </Item>
</AML>").getItemCount();

this.setProperty("next_to_move", relCount % 2 == 0 ? "White" : "Black");
string toPlay = this.getProperty("next_to_move", "") == "White" ? white : black;

if (alias.getProperty("related_id") != toPlay) return this.getInnovator().newError("Person with identity " + toPlay + " can play next as " + (toPlay == white ? "white" : "black") + ", Current player is " + alias.getProperty("related_id"));
return this;

]]></method_code>
  <method_type>C#</method_type>
  <name>chessPreventLock</name>
 </Item>
</AML>